#pragma once
#include <autograph/Config.h>
#include <autograph/Core/Exports.h>
#include <cstdint>
#include <cstdlib>

namespace ag {
enum class ImageFormat {
  R32G32B32A32_SFLOAT = 0,
  R16G16B16A16_SFLOAT,
  R32G32_SFLOAT,
  R32_SFLOAT,
  R8_UNORM,
  R8G8B8A8_UNORM,
  R8G8B8A8_SNORM,
  B10G11R11_UFLOAT_PACK32,
  D32_SFLOAT,
  A2R10G10B10_UNORM_PACK32,
  A2R10G10B10_SNORM_PACK32,
  R8_SRGB,
  R8G8_SRGB,
  R8G8B8_SRGB,
  R8G8B8A8_SRGB,
  R32G32B32A32_UINT,
  R16G16_SFLOAT,
  R16G16_SINT,
  // Compressed block texture formats
  BC1_RGB_UNORM_BLOCK,
  BC1_RGB_SRGB_BLOCK,
  BC1_RGBA_UNORM_BLOCK,
  BC1_RGBA_SRGB_BLOCK,
  BC2_UNORM_BLOCK,
  BC2_SRGB_BLOCK,
  BC3_UNORM_BLOCK,
  BC3_SRGB_BLOCK,
  BC4_UNORM_BLOCK,
  BC4_SNORM_BLOCK,
  BC5_UNORM_BLOCK,
  BC5_SNORM_BLOCK,
  BC6H_UFLOAT_BLOCK,
  BC6H_SFLOAT_BLOCK,
  BC7_UNORM_BLOCK,
  BC7_SRGB_BLOCK,
  ETC2_R8G8B8_UNORM_BLOCK,
  ETC2_R8G8B8_SRGB_BLOCK,
  ETC2_R8G8B8A1_UNORM_BLOCK,
  ETC2_R8G8B8A1_SRGB_BLOCK,
  ETC2_R8G8B8A8_UNORM_BLOCK,
  ETC2_R8G8B8A8_SRGB_BLOCK,
  EAC_R11_UNORM_BLOCK,
  EAC_R11_SNORM_BLOCK,
  EAC_R11G11_UNORM_BLOCK,
  EAC_R11G11_SNORM_BLOCK,
  ASTC_4x4_UNORM_BLOCK,
  ASTC_4x4_SRGB_BLOCK,
  ASTC_5x4_UNORM_BLOCK,
  ASTC_5x4_SRGB_BLOCK,
  ASTC_5x5_UNORM_BLOCK,
  ASTC_5x5_SRGB_BLOCK,
  ASTC_6x5_UNORM_BLOCK,
  ASTC_6x5_SRGB_BLOCK,
  ASTC_6x6_UNORM_BLOCK,
  ASTC_6x6_SRGB_BLOCK,
  ASTC_8x5_UNORM_BLOCK,
  ASTC_8x5_SRGB_BLOCK,
  ASTC_8x6_UNORM_BLOCK,
  ASTC_8x6_SRGB_BLOCK,
  ASTC_8x8_UNORM_BLOCK,
  ASTC_8x8_SRGB_BLOCK,
  ASTC_10x5_UNORM_BLOCK,
  ASTC_10x5_SRGB_BLOCK,
  ASTC_10x6_UNORM_BLOCK,
  ASTC_10x6_SRGB_BLOCK,
  ASTC_10x8_UNORM_BLOCK,
  ASTC_10x8_SRGB_BLOCK,
  ASTC_10x10_UNORM_BLOCK,
  ASTC_10x10_SRGB_BLOCK,
  ASTC_12x10_UNORM_BLOCK,
  ASTC_12x10_SRGB_BLOCK,
  ASTC_12x12_UNORM_BLOCK,
  ASTC_12x12_SRGB_BLOCK,
  Max
};

struct ImageFormatInfo {
  const char *name;
  uint32_t size;
  uint32_t numChannels;
};

AG_CORE_API const ImageFormatInfo &getImageFormatInfo(ImageFormat fmt);
}
