#include "pixel_format.hpp"
namespace ag
{
const char *get_pixel_format_name(PixelFormat fmt) {
  switch (fmt) {
  case PixelFormat::Uint32x4:
    return "Uint32x4";
  case PixelFormat::Sint32x4:
    return "Sint32x4";
  case PixelFormat::Float4:
    return "Float4";
  case PixelFormat::Uint32x3:
    return "Uint32x3";
  case PixelFormat::Sint32x3:
    return "Sint32x3";
  case PixelFormat::Float3:
    return "Float3";
  case PixelFormat::Float2:
    return "Float2";
  case PixelFormat::Uint16x4:
    return "Uint16x4";
  case PixelFormat::Sint16x4:
    return "Sint16x4";
  case PixelFormat::Unorm16x4:
    return "Unorm16x4";
  case PixelFormat::Snorm16x4:
    return "Snorm16x4";
  case PixelFormat::Float16x4:
    return "Float16x4";
  case PixelFormat::Uint16x2:
    return "Uint16x2";
  case PixelFormat::Sint16x2:
    return "Sint16x2";
  case PixelFormat::Unorm16x2:
    return "Unorm16x2";
  case PixelFormat::Snorm16x2:
    return "Snorm16x2";
  case PixelFormat::Float16x2:
    return "Float16x2";
  case PixelFormat::Uint8x4:
    return "Uint8x4";
  case PixelFormat::Sint8x4:
    return "Sint8x4";
  case PixelFormat::Unorm8x4:
    return "Unorm8x4";
  case PixelFormat::Snorm8x4:
    return "Snorm8x4";
  case PixelFormat::Uint8x3:
    return "Uint8x3";
  case PixelFormat::Sint8x3:
    return "Sint8x3";
  case PixelFormat::Unorm8x3:
    return "Unorm8x3";
  case PixelFormat::Snorm8x3:
    return "Snorm8x3";
  case PixelFormat::Uint8x2:
    return "Uint8x2";
  case PixelFormat::Sint8x2:
    return "Sint8x2";
  case PixelFormat::Unorm8x2:
    return "Unorm8x2";
  case PixelFormat::Snorm8x2:
    return "Snorm8x2";
  case PixelFormat::Unorm10x3_1x2:
    return "Unorm10x3_1x2";
  case PixelFormat::Snorm10x3_1x2:
    return "Snorm10x3_1x2";
  case PixelFormat::BC1:
    return "BC1";
  case PixelFormat::BC2:
    return "BC2";
  case PixelFormat::BC3:
    return "BC3";
  case PixelFormat::UnormBC4:
    return "UnormBC4";
  case PixelFormat::SnormBC4:
    return "SnormBC4";
  case PixelFormat::UnormBC5:
    return "UnormBC5";
  case PixelFormat::SnormBC5:
    return "SnormBC5";
  case PixelFormat::Uint32:
    return "Uint32";
  case PixelFormat::Sint32:
    return "Sint32";
  case PixelFormat::Uint16:
    return "Uint16";
  case PixelFormat::Sint16:
    return "Sint16";
  case PixelFormat::Unorm16:
    return "Unorm16";
  case PixelFormat::Snorm16:
    return "Snorm16";
  case PixelFormat::Uint8:
    return "Uint8";
  case PixelFormat::Sint8:
    return "Sint8";
  case PixelFormat::Unorm8:
    return "Unorm8";
  case PixelFormat::Snorm8:
    return "Snorm8";
  case PixelFormat::Depth32:
    return "Depth32";
  case PixelFormat::Depth24:
    return "Depth24";
  case PixelFormat::Depth24_Stencil8:
    return "Depth24_Stencil8";
  case PixelFormat::Depth16:
    return "Depth16";
  case PixelFormat::Float16:
    return "Float16";
  case PixelFormat::Float:
    return "Float";
  case PixelFormat::Max:
    return "Max";
  default:
	  return "unknown";
  }
}
}
