Minimal system:
 ☐ Autograph interface
   autograph/gl/*.h
   draw(xxxx)
   compute(xxxx)
 ☐ Core utilities, misc functions
   linearToSrgb
   AABB
   ImageFormat
   Transform
   optional<T>, variant<T>
 ☐ Camera
   autograph/core/Camera.h
 ☐ Mesh base class
   autograph/engine/Mesh.h => autograph/gl
 ☐ Image load/save
   autograph/engine/ImageLoad.h
     loadTexture(...) => gl::Texture
     loadImage(...) => std::vector
     loadTextureFloat(..., bool srgb_input) => ...
     loadImageFloat(..., bool srgb_input) => ...
 ☐ Qt widgets
 ☐ Effect scripts
   autograph/fx/Effect.h => sol2
   autograph/fx/Pass.h
 ☐ Visual tree (transform hierarchy)
 ☐ Serialization
   autograph/support/Serialization.h
 ☐ OS helpers: file dialogs 
   autograph/support/NativeFileDialog.h 
 ☐ Hot reloading (meshes, textures)
 ☐ Lua scripting for GUI and input
   autograph/script/Script.h => sol2

General:
 ☐ Implement cameras @high @minimal_subset
 ☐ Camera control from Lua script @high @minimal_subset
 ☐ Meshes @high @minimal_subset
 ☐ Scenes
 ☐ Load textures from a file
 ☐ Resource management
 ☐ Serialization
 ☐ Hot reload

Serialization:
 ☐ Save scene 
 ☐ Load scene
 ☐ Save parameters (to Lua script)
 ☐ Load parameters from Lua script

Autograph:
 ☐ Binders
 ☐ Draw call
 ☐ Compute call
 ☐ State group

Autograph extensions:
 ☐ Shader cache @low
 ☐ Texture / render target cache @low
 ☐ Readback for video capture @low
 ☐ Effect/pipeline system

Resource management:
 ☐ ???
 
Effect/pipeline system:
 ✔ Create textures from script @high  @done (16-11-05 16:44)
 ☐ Create compute passes @high 
 ☐ Move into submodule @high
 ☐ Specify draw states @high 
 ☐ Create draw passes @high 
 ☐ Create screen passes
 ☐ Run screen passes @high @minimal_subset
 ☐ Run compute passes
 ☐ Run draw passes
 ☐ Specify and run dependencies of passes 
 ☐ Specify uniforms in script
 ☐ Named uniforms
 ☐ Pass tags (arbitrary values)
 ☐ Pass variants: name + parameters
 ☐ Cache passes and compiled shaders (shader cache)
 ☐ Decide if we keep the C API or go with manual registration of functions
 ☐ Create passes, textures in C++ (mirror functionality exposed in scripts)
 ☐ Techniques

Scenes:
 ☐ Load mesh with assimp
 ☐ Scene: hierarchy of transforms and associated visual elements (meshes, particle systems, billboards, etc.)
 ☐ Transform struct
 ☐ Load scene tree with assimp (hierarchy of transforms with associated meshes)
 ☐ IDMap and IDTable @low 
 ☐ Intrusive lists @low

Editor/painter:
 ☐ Camera control @high
 ☐ Basic rendering @high
 ☐ Basic volumetric rendering
 ☐ Better shadows
 ☐ Qt GUI: UI builder @low
 ☐ Rendering pipeline from Lua

Engine:
 ☐ Basic renderer: take a scene and draw the visuals
 ☐ Basic deferred shading
 ☐ Transparent pass
 ☐ Basic material system (opaque and transparent buckets)

Animation:
 ☐ Animation curves @low

Scripting:
 ✔ LuaJIT @low @done (16-11-04 11:06)
 ✔ LuaJIT CMake @done (16-11-05 16:43)

Live GUI:
 ☐ Panels
 ☐ Dock panels
 ☐ Buttons
 ☐ Layout
 ☐ Sliders
 ☐ Tabs
 ☐ UI builder
 ☐ Text edit
 ☐ Text edit (multiline)
 ☐ Image canvas (zoom, pan, rotate)
 ☐ Support for graphics tablets
 ☐ Color picker
 ☐ Curve editor
 ☐ Node editor
 ☐ Lua extensibility
 ☐ Save layout to Lua/Json


Long-term:
 ☐ autograph_vk: Vulkan backend
 ☐ Live GUI
 ☐ An actual game?
 ☐ Terrain generation