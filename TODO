Minimal system:
 ✔ Autograph interface @done (17-01-15 12:34)
   autograph/gl/*.h
   draw(xxxx)
   compute(xxxx)
 ✔ Core utilities, misc functions @done (17-02-10 21:22)
   linearToSrgb
   AABB
   ImageFormat
   Transform
   optional<T>, variant<T>
 ✔ Camera @done (17-01-15 12:29)
   autograph/core/Camera.h
 ✔ Mesh base class @done (17-01-15 12:29)
   autograph/engine/Mesh.h => autograph/gl
 ✔ Image load/save @done (17-01-15 12:29)
   autograph/engine/ImageLoad.h
     loadTexture(...) => gl::Texture
     loadImage(...) => std::vector
     loadTextureFloat(..., bool srgb_input) => ...
     loadImageFloat(..., bool srgb_input) => ...
 ☐ Qt widgets
 ✘ Effect scripts @cancelled (16-12-30 19:08)
   autograph/fx/Effect.h => sol2
   autograph/fx/Pass.h
 ☐ Visual tree (transform hierarchy)
 ☐ Serialization
   autograph/support/Serialization.h
 ☐ OS helpers: file dialogs 
   autograph/support/NativeFileDialog.h 
 ☐ Hot reloading (meshes, textures) @high
 ☐ Lua scripting for GUI and input
   autograph/script/Script.h => sol2
 ☐ Documentation
 ✔ Make a header that includes everything @high @done (17-02-10 21:29)
     autograph/engine/All.h
     autograph/gl/All.h
 ✔ Helper: render screen quad @high @done (17-01-20 18:09)
 ☐ Long-term: implement a gratin-like interface for image processing
   Possibly as lua scripts first
   At least, find somewhere else to test shaders
 ☐ Image save: separate pixel & target formats
 ☐ Image save: SRGB conversions
 ✔ Texture inspector: range min/max @done (17-02-10 21:23)
 ☐ Texture inspector: channel selection
 ☐ Remove unused git submodules
 ☐ Function for converting from screen to NDC coordinates
 ☐ rename drawQuad => drawScreenQuad
 ✔ drawRect: a,b,c,d,uv_a,uv_b,uv_c,uv_d @done (17-02-10 21:22)
 ✔ drawRect @done (17-02-07 22:16)
 ✘ getParentDirectory(id) is misleading => maybe create a class for resource paths? @cancelled (17-02-26 11:47)
     ResourceID: resource path or full path in filesystem
 ☐ Suggestion: fuse DeferredSceneRenderer and DeferredSceneRenderer::GBuffers
 ✔ Profiler @done (17-02-20 21:42)
 ☐ GPU profiler
 ☐ Profiler: timeline view
 ☐ Multi-window
   ☐ Move main loop into application (Application::mainLoop()) 
 ✔ Issue: engine profiler needs GPU profiler, which should be in the GL (graphics) module @done (17-02-26 11:47)
   ✔ Resolution: timers only in GL module @done (17-02-26 11:47)
 ☐ Move arcball to core-math module
 ✔ RenderUtils => move to namespace @done (17-03-10 19:10)
 ☐ Move scene editor into separate file
 ✔ Coherence: rename Scene => TransformComponents @done (17-03-18 17:34)
   RenderableScene => RenderableComponents
   LightScene => LightComponents
 ☐ Group global state in one place ('Engine')
     Loaded dynamic modules
     Shader cache
     Main loop
     Render utils
     Profiler

General:
 ✔ Implement cameras @high @minimal_subset @done (16-12-24 14:12)
 ✔ Camera control from Lua script @high @minimal_subset @done (16-12-24 14:12)
 ✔ Meshes @high @minimal_subset @done (16-12-18 20:53)
 ✔ Scenes @done (16-12-18 20:53)
 ✔ Load textures from a file @done (17-01-07 17:08)
 ☐ Filter unsupported formats for texture loading
 ✔ Resource management @done (17-01-07 17:08)
 ☐ Serialization
 ☐ Hot reload
 ✔ template Mesh<T> types @done (17-01-08 14:39)
   make it a gl::Drawable
 ✔ VertexTraits for generic vertex manipulation @done (17-01-08 14:39)
 ☐ gl::Texture API rework
   ☐ upload(): allow flexible formats for input pixel data
     current one is extremely unsafe
 ✔ gl::Buffer: constructor @done (17-01-15 12:28)
 ☐ binders: default samplers for texture bindings
 ☐ fix weird diagonal tearing bug
   Vsync?
   Seems like a known nvidia problem
 ☐ Graphical testing framework @high
   To check for regressions
   
Serialization:
 ☐ Save scene 
 ☐ Load scene
 ☐ Save parameters (to Lua script)
 ☐ Load parameters from Lua script

Autograph:
 ✔ Binders @done (16-12-18 20:52)
 ✔ Named uniforms @done (17-01-21 17:00)
 ☐ Implementation limits
 ☐ Query objects
 ✔ Draw call @done (16-12-18 20:52)
 ✔ Compute call @high @done (17-02-10 21:32)
   autograph/gl/Compute.h
   gl::dispatchCompute()
 ☐ Compute helpers
   gl::dispatchComputeOnImage()
 ✔ State group @done (16-12-18 20:52)
 ☐ Geometry shader
 ✔ Scissor state @easy @high @done (17-02-07 22:30)
 ☐ Correctly handle scissor for MRTs
 ☐ Viewport: set all viewports at once
 ✔ Make a header that includes everything @high @done (17-02-18 13:03)
   autograph/gl/All.h
 ☐ The Lua shader system is 'good' => include it in autograph, then release autograph
 ☐ Optimize state changes and GL calls

Autograph extensions:
 ✔ Shader cache @low @done (17-03-02 21:22)
 ☐ Texture / render target cache
 ☐ Readback for video capture @low
 ☐ Effect/pipeline system
 ✔ RenderTarget utility class @done (17-01-15 12:35)

Resource management:
 ✔ Resource pools @done (17-01-15 12:35)
 
Effect/pipeline system:
 ✔ Create textures from script @high  @done (16-11-05 16:44)
 ☐ Create compute passes @high 
 ☐ Move into submodule @high
 ✔ Specify draw states @high  @done (16-12-18 20:52)
 ✔ Create draw passes @high  @done (16-12-18 20:52)
 ✘ Create screen passes @cancelled (17-01-21 17:00) 
   Use gl::drawQuad
 ☐ Run screen passes @high @minimal_subset
 ✔ Run compute passes @done (17-02-18 13:04)
 ☐ Geometry shader support @high
 ☐ Tess shader support
 ✔ Run draw passes @done (16-12-18 20:52)
 ✘ Specify and run dependencies of passes  @cancelled (16-12-24 14:13)
 ☐ Specify uniforms in script
 ✔ Named uniforms @done (17-02-03 22:41)
 ☐ Pass tags (arbitrary values)
 ☐ Pass variants: name + parameters
 ☐ Cache passes and compiled shaders (shader cache)
 ✔ Decide if we keep the C API or go with manual registration of functions @done (17-01-07 17:10)
 ✔ Create passes, textures in C++ (mirror functionality exposed in scripts) @done (16-12-18 20:52)
 ☐ Techniques
 ☐ Cleanup: inline GLSL source in shader definition files
 ☐ Cleanup: add #line directives to preprocessor
 ☐ Cleanup: do not read from the shader file each time
 ☐ Cleanup: get rid of the redundant gl.* table in shader scripts
 ✔ Cleanup: DrawPassBuilder move into *this @done (17-01-20 14:30)
 ✔ Cleanup: Merge DrawPass/ComputePass into a single class ('Shader') ? @done (17-01-20 14:30)
 ☐ Cleanup: get rid of the Lua template system, replace with simple preprocessor 
   Or find something better?
 ☐ Robustness: issue a one-time warning when a named uniform is not found @high
 ☐ Hot-reload @high
 ☐ Move the shader preprocessor to the C++ side
   Easier to debug, fixed code that does not change often

Scenes:
 ✔ Load mesh with assimp @done (16-12-18 20:53)
 ✔ Scene: hierarchy of transforms and associated visual elements (meshes, particle systems, billboards, etc.) @done (17-02-10 21:29)
 ✔ Transform struct @done (16-12-18 20:53)
 ✔ Load scene tree with assimp (hierarchy of transforms with associated meshes) @done (17-01-15 12:27)
 ☐ IDMap and IDTable @low 
 ☐ Intrusive lists @low
 ☐ Transform: setScale(float), setPosition
 ☐ SceneObject: shorthand setScale(...), setPosition(...)
 ✔ Move SceneObject in its own header @done (17-02-21 14:21)
 ✔ Move Renderable in its own header @done (17-02-21 14:21)
     Renderable = default material?
     Material
     StandardMaterial : public Material
 ✘ rename EntityList -> Scene @cancelled (17-02-19 19:21)
 ☐ Scene: Should not need a root 
 ✘ Scene.h: Scene, Component<Derived> @cancelled (17-02-19 19:21)
 ☐ Scene loader: choose what to load 
     only geometry
     geometry + textures
     geometry + custom materials

Editor/painter:
 ✔ Camera control @high @done (17-01-15 12:25)
 ☐ Basic rendering @high
 ☐ Basic volumetric rendering
 ☐ Better shadows
 ☐ Qt GUI: UI builder @low
 ☐ Rendering pipeline from Lua

Engine:
 ✔ Basic renderer: take a scene and draw the visuals @done (17-01-15 12:25)
 ✔ Basic deferred shading @done (17-01-15 12:25)
 ☐ Transparent pass
 ☐ Basic material system (opaque and transparent buckets)

Animation:
 ☐ Animation curves @low

Scripting:
 ✔ LuaJIT @low @done (16-11-04 11:06)
 ✔ LuaJIT CMake @done (16-11-05 16:43)

Reflection:
 ✔ Reboot reflection generator @done (17-01-15 12:25)
     CMake updated, uses lua scripts instead
 ✔ Make Lua templates work  @done (17-01-15 12:26)
 ☐ Automatic Lua binding generation using reflection
 ☐ Merge reflection databases
 ☐ CMake: can specify multiple templates files and multiple database files in reflection_render_template 
 ☐ Support types with unions
 ☐ Support anonymous structs
 ☐ Read-only properties

Live GUI:
 ☐ Panels
 ☐ Dock panels
 ☐ Buttons
 ☐ Layout
 ☐ Sliders
 ☐ Tabs
 ☐ UI builder
 ☐ Text edit
 ☐ Text edit (multiline)
 ☐ Image canvas (zoom, pan, rotate)
 ☐ Support for graphics tablets
 ☐ Color picker
 ☐ Curve editor
 ☐ Node editor
 ☐ Lua extensibility
 ☐ Save layout to Lua/Json

Long-term:
 ☐ autograph_vk: Vulkan backend
 ☐ Live GUI
 ☐ An actual game?
 ☐ Terrain generation

List of errors made, and corrective measures:
Error, first noticed where (intellisense, compile-time, runtime crash, runtime silent), corrective measures, impact on iteration time
 ☐ [runtime silent] GLSL: declare a new variable instead of assigning 
     ??? GLSL linter/compiler warning?
 ☐ [runtime crash] Lua: crash on include file not found, no check 
     Check for existence of include file, report error if it doesn't exist
     Robustness (file IO)
 ☐ [runtime crash] Lua/GLSL: include file not found, no more info given
     Output more info
     Keep a stack of includes 
 ☐ [runtime silent] C++/GLSL: wrong name for uniform 
     Check if the uniform actually exists in the shader
 ☐ [runtime silent] C++/GLSL: wrong uniform buffer layout 
     Check if the size of the buffer in the C++ size matches the one in the shader signature
 ☐ [runtime silent] C++/GLSL: wrong struct used for uniform buffer 
     Same as above
 ☐ [runtime silent] Lua/GLSL: incorrect depthWrite specification (copy-paste) 
     ???
     Live frame inspector
 ☐ [runtime silent] C++/GLSL: copying pointer to data instead of data 
     ???
 ☐ [runtime silent] C++: created a Camera and a CameraControl, but forgot to assign the camera from camCtl.getCamera() 
     ??? 
 ☐ [runtime silent] C++: Passed a transparent color 
     ???
     Live frame inspector
 ☐ [runtime crash] C++/SceneObject: forgot that sceneObject->pMesh can be null 
     Iterate only on objects with a mesh (views? custom iterator?)
     scene.getRenderableObjects/getVisibleObjects()
 ☐ [runtime silent] C++: UploadFrameData instead of uploadFrameArray
     ??? Could be caught at compile-time
 ☐ [runtime silent] C++: Wrong pass name specified
 ☐ [runtime silent] Lua: Wrong shader file specified
     => Two (unnecessary?) indirections
 ☐ [runtime silent] C++/SceneObject: passed the identity matrix instead of the actual object transform 
     ???
 ☐ [runtime silent] Camera not centered on object
     Robust camera auto-center 
 ☐ [runtime silent] gl::bind::vertexBuffer: incorrect stride parameter (x2)
     Use meshes
     Use type-safe bind::vertexBuffer
     Use typed BufferSlices
 ☐ [runtime silent] gl::bind::vertexBuffer: incorrect stride parameter b/c of C++ alignment
     ??? 
 ☐ [runtime silent] Lua/ShaderDef: no error when 'layout' in shader def was set to an undefined table  
     Require a layout to be present, issue an error otherwise
     For each layout entry, check if all required members are present, error otherwise
     ShaderInspector: show VAO 
 ☐ [intellisense] Forgot pointer indirection somewhere
     Caught by intellisense
     Coherent API
 ☐ [runtime silent] uploadFrameData: pointer to pointer to data instead of pointer to data
     Probably a copy-paste error
 ☐ [runtime silent] Incorrect screen to NDC transformation in C++
 ✔ [runtime silent] Wrong matrix multiplication order when computing model matrix from Transform (fixed) @done (17-02-17 19:00)

Ideas:
 ☐ General: Lua shader robustness
 ✔ ImGuiUtils.h @done (17-02-17 14:34)
   Immediate-mode GUIs for various objects
 ☐ Undo list for scene operations
 ☐ Object picking
 ☐ Low-level 'Frame debugger'/'Frame inspector' => record calls made to gl::draw and gl::compute to identify suspicious behaviors
   ☐ Weird bindings
   ☐ Weird data size passed to uploadFrameData
   ☐ Signature matching between shader and bindings 
     incoherent buffer sizes for UBOs
   ☐ Weird/incoherent fixed-pipeline state combinations
   ☐ Warnings on states that can prevent pixels from being rendered to the screen (weird blend states)
   ☐ glDepthMask(true) on glClear(GL_DEPTH_BUFFER_BIT)
   ☐ Forgot to clear a framebuffer since last frame (need per-object history)
 ☐ Shader 'testbench'
   Included as a library
 ☐ Ctrl+F12: 'dev tools' 
   ☐ Access to frame inspector, script inspector, texture inspector, shader testbench, etc.
   ✔ GL object tracker @done (17-02-19 15:44)
     ✔ Issue: can't store a reference to the wrapper object because it may move in memory @done (17-02-04 14:15)
       Dynamically allocate gl::Texture ? 
       GL objects have pointer-to-implementations?
       ** Just track GLHandles
   ✔ Shader tracker @done (17-02-19 15:44)
      Dynamically inspect and modify the state of Shader instances
      Need the shader cache for that (since we can't keep track of all Shader instances)
   ☐ Texture inspector: evaluate expression on pixels 
     Input: GLSL code, compile shader, run a pass, draw the result
   ☐ Fix the resource pool mess
   ☐ Global tuning variables (CVars)
     ☐ CVar<float>(name, init);