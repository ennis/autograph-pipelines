Minimal system:
 ✔ Autograph interface @done (17-01-15 12:34)
   autograph/gl/*.h
   draw(xxxx)
   compute(xxxx)
 ☐ Core utilities, misc functions
   linearToSrgb
   AABB
   ImageFormat
   Transform
   optional<T>, variant<T>
 ✔ Camera @done (17-01-15 12:29)
   autograph/core/Camera.h
 ✔ Mesh base class @done (17-01-15 12:29)
   autograph/engine/Mesh.h => autograph/gl
 ✔ Image load/save @done (17-01-15 12:29)
   autograph/engine/ImageLoad.h
     loadTexture(...) => gl::Texture
     loadImage(...) => std::vector
     loadTextureFloat(..., bool srgb_input) => ...
     loadImageFloat(..., bool srgb_input) => ...
 ☐ Qt widgets
 ✘ Effect scripts @cancelled (16-12-30 19:08)
   autograph/fx/Effect.h => sol2
   autograph/fx/Pass.h
 ☐ Visual tree (transform hierarchy)
 ☐ Serialization
   autograph/support/Serialization.h
 ☐ OS helpers: file dialogs 
   autograph/support/NativeFileDialog.h 
 ☐ Hot reloading (meshes, textures)
 ☐ Lua scripting for GUI and input
   autograph/script/Script.h => sol2
 ☐ Documentation

General:
 ✔ Implement cameras @high @minimal_subset @done (16-12-24 14:12)
 ✔ Camera control from Lua script @high @minimal_subset @done (16-12-24 14:12)
 ✔ Meshes @high @minimal_subset @done (16-12-18 20:53)
 ✔ Scenes @done (16-12-18 20:53)
 ✔ Load textures from a file @done (17-01-07 17:08)
 ☐ Filter unsupported formats for texture loading
 ✔ Resource management @done (17-01-07 17:08)
 ☐ Serialization
 ☐ Hot reload
 ✔ template Mesh<T> types @done (17-01-08 14:39)
   make it a gl::Drawable
 ✔ VertexTraits for generic vertex manipulation @done (17-01-08 14:39)
 ☐ gl::Texture API rework
   ☐ upload(): allow flexible formats for input pixel data
     current one is extremely unsafe
 ✔ gl::Buffer: constructor @done (17-01-15 12:28)
 ☐ binders: default samplers for texture bindings
 ✔ fix weird tearing bug @done (17-01-08 14:39)
   Was Vsync?
   
Serialization:
 ☐ Save scene 
 ☐ Load scene
 ☐ Save parameters (to Lua script)
 ☐ Load parameters from Lua script

Autograph:
 ✔ Binders @done (16-12-18 20:52)
 ✔ Draw call @done (16-12-18 20:52)
 ☐ Compute call @high
 ✔ State group @done (16-12-18 20:52)

Autograph extensions:
 ☐ Shader cache @low
 ☐ Texture / render target cache @low
 ☐ Readback for video capture @low
 ☐ Effect/pipeline system
 ✔ RenderTarget utility class @done (17-01-15 12:35)

Resource management:
 ✔ Resource pools @done (17-01-15 12:35)
 
Effect/pipeline system:
 ✔ Create textures from script @high  @done (16-11-05 16:44)
 ☐ Create compute passes @high 
 ☐ Move into submodule @high
 ✔ Specify draw states @high  @done (16-12-18 20:52)
 ✔ Create draw passes @high  @done (16-12-18 20:52)
 ☐ Create screen passes
 ☐ Run screen passes @high @minimal_subset
 ☐ Run compute passes
 ✔ Run draw passes @done (16-12-18 20:52)
 ✘ Specify and run dependencies of passes  @cancelled (16-12-24 14:13)
 ☐ Specify uniforms in script
 ☐ Named uniforms
 ☐ Pass tags (arbitrary values)
 ☐ Pass variants: name + parameters
 ☐ Cache passes and compiled shaders (shader cache)
 ✔ Decide if we keep the C API or go with manual registration of functions @done (17-01-07 17:10)
 ✔ Create passes, textures in C++ (mirror functionality exposed in scripts) @done (16-12-18 20:52)
 ☐ Techniques
 ☐ Cleanup: inline GLSL source in shader definition files
 ☐ Cleanup: add #line directives to preprocessor
 ☐ Cleanup: do not read from the shader file each time
 ☐ Cleanup: DrawPassBuilder move into *this
 ☐ Cleanup: Merge DrawPass/ComputePass into a single class ('Shader') ?

Scenes:
 ✔ Load mesh with assimp @done (16-12-18 20:53)
 ☐ Scene: hierarchy of transforms and associated visual elements (meshes, particle systems, billboards, etc.)
 ✔ Transform struct @done (16-12-18 20:53)
 ✔ Load scene tree with assimp (hierarchy of transforms with associated meshes) @done (17-01-15 12:27)
 ☐ IDMap and IDTable @low 
 ☐ Intrusive lists @low

Editor/painter:
 ✔ Camera control @high @done (17-01-15 12:25)
 ☐ Basic rendering @high
 ☐ Basic volumetric rendering
 ☐ Better shadows
 ☐ Qt GUI: UI builder @low
 ☐ Rendering pipeline from Lua

Engine:
 ✔ Basic renderer: take a scene and draw the visuals @done (17-01-15 12:25)
 ✔ Basic deferred shading @done (17-01-15 12:25)
 ☐ Transparent pass
 ☐ Basic material system (opaque and transparent buckets)

Animation:
 ☐ Animation curves @low

Scripting:
 ✔ LuaJIT @low @done (16-11-04 11:06)
 ✔ LuaJIT CMake @done (16-11-05 16:43)

Reflection:
 ✔ Reboot reflection generator @done (17-01-15 12:25)
     CMake updated, uses lua scripts instead
 ✔ Make Lua templates work  @done (17-01-15 12:26)
 ☐ Automatic Lua binding generation using reflection
 ☐ Merge reflection databases
 ☐ CMake: can specify multiple templates files and multiple database files in reflection_render_template 
 ☐ Support types with unions
 ☐ Support anonymous structs
 ☐ Read-only properties

Live GUI:
 ☐ Panels
 ☐ Dock panels
 ☐ Buttons
 ☐ Layout
 ☐ Sliders
 ☐ Tabs
 ☐ UI builder
 ☐ Text edit
 ☐ Text edit (multiline)
 ☐ Image canvas (zoom, pan, rotate)
 ☐ Support for graphics tablets
 ☐ Color picker
 ☐ Curve editor
 ☐ Node editor
 ☐ Lua extensibility
 ☐ Save layout to Lua/Json


Long-term:
 ☐ autograph_vk: Vulkan backend
 ☐ Live GUI
 ☐ An actual game?
 ☐ Terrain generation
 